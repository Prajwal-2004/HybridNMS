#!/usr/bin/env python3
from mininet.net import Mininet
from mininet.node import Controller
from mininet.cli import CLI
from mininet.link import TCLink
from prometheus_client import start_http_server, Gauge
import threading
import time

# Global control flag
RUNNING = True

# Prometheus metrics
latency_gauge = Gauge('link_latency_ms', 'Ping latency between hosts', ['src', 'dst'])
loss_gauge = Gauge('link_loss_pct', 'Packet loss percentage between hosts', ['src', 'dst'])

def measure_loop(h1, h2):
    """Continuously measure latency and packet loss between h1 and h2."""
    global RUNNING
    while RUNNING:
        try:
            out = h1.cmd('ping -c 3 %s' % h2.IP())
            lines = out.strip().split('\n')
            # Last line usually contains rtt stats
            if "rtt min/avg/max/mdev" in out:
                stats_line = [l for l in lines if "rtt min/avg" in l][0]
                avg_latency = float(stats_line.split('/')[4])
                latency_gauge.labels(src=h1.name, dst=h2.name).set(avg_latency)
            # Parse packet loss
            if "packet loss" in out:
                loss_line = [l for l in lines if "packet loss" in l][0]
                loss_pct = float(loss_line.split('%')[0].split()[-1])
                loss_gauge.labels(src=h1.name, dst=h2.name).set(loss_pct)
        except Exception as e:
            print("Error in measurement loop:", e)
        time.sleep(5)

def main():
    global RUNNING
    net = Mininet(controller=Controller, link=TCLink)
    c0 = net.addController('c0')

    # Add hosts and switches
    h1 = net.addHost('h1', ip='10.0.0.1')
    h2 = net.addHost('h2', ip='10.0.0.2')
    s1 = net.addSwitch('s1')
    s2 = net.addSwitch('s2')

    # Add links
    net.addLink(h1, s1, bw=10, delay='5ms')
    net.addLink(h2, s2, bw=10, delay='5ms')
    net.addLink(s1, s2, bw=10, delay='5ms')

    net.start()

    # Start Prometheus HTTP server
    start_http_server(8000)
    print("Prometheus exporter running on port 8000")

    # Start measurement thread
    t = threading.Thread(target=measure_loop, args=(h1, h2))
    t.daemon = True
    t.start()

    # Launch Mininet CLI
    try:
        CLI(net)
    finally:
        # Stop loop and network when CLI exits
        RUNNING = False
        net.stop()

if __name__ == '__main__':
    main()
